Why Use Generics?
In a nutshell, generics enable types (classes and interfaces) to be parameters when defining classes,
interfaces and methods. Much like the more familiar formal parameters used in method declarations,
type parameters provide a way for you to re-use the same code with different inputs.
The difference is that the inputs to formal parameters are values,
while the inputs to type parameters are types.

The Java Collections Framework provides the following benefits:

Reduces programming effort: By providing useful data structures and algorithms,
the Collections Framework frees you to concentrate on the important parts of your program rather than on the low-level "plumbing" required to make it work. By facilitating interoperability among unrelated APIs, the Java Collections Framework frees you from writing adapter objects or conversion code to connect APIs.

Increases program speed and quality:
This Collections Framework provides high-performance,
high-quality implementations of useful data structures and algorithms. T
he various implementations of each interface are interchangeable,
so programs can be easily tuned by switching collection implementations.
Because you're freed from the drudgery of writing your own data structures,
you'll have more time to devote to improving programs' quality and performance.

Allows interoperability among unrelated APIs:
The collection interfaces are the vernacular by which APIs pass collections back and forth.
If my network administration API furnishes a collection of node names and if your GUI toolkit expects a collection of column headings,
our APIs will interoperate seamlessly, even though they were written independently.

Reduces effort to learn and to use new APIs: Many APIs naturally take collections on input and furnish them as output.
In the past, each such API had a small sub-API devoted to manipulating its collections.
There was little consistency among these ad hoc collections sub-APIs,
so you had to learn each one from scratch, and it was easy to make mistakes when using them.
With the advent of standard collection interfaces, the problem went away.

Reduces effort to design new APIs: This is the flip side of the previous advantage.
Designers and implementers don't have to reinvent the wheel each time they create an API that relies on collections;
instead, they can use standard collection interfaces.

Fosters software reuse: New data structures that conform to the standard collection interfaces are by nature reusable.
The same goes for new algorithms that operate on objects that implement these interfaces.